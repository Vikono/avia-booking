// Package specs provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package specs

import (
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ClassData defines model for ClassData.
type ClassData struct {
	// Buggage Максимально допустимый вес багажа
	Buggage int64 `json:"buggage"`

	// Class Класс билета
	Class string `json:"class"`

	// Luggage Максимально допустимый вес ручной клади
	Luggage        int64       `json:"luggage"`
	Refund         interface{} `json:"refund"`
	TicketExchange interface{} `json:"ticket_exchange"`
}

// FlightCard defines model for FlightCard.
type FlightCard struct {
	// ArrivalDatetime Дата и время прибытия
	ArrivalDatetime string      `json:"arrival_datetime"`
	ClassData       []ClassData `json:"class_data"`

	// Company Название авиакомпании
	Company string `json:"company"`

	// DepartureDatetime Дата и время отбытия
	DepartureDatetime string `json:"departure_datetime"`

	// Destination Место назначения
	Destination string `json:"destination"`

	// Id ID
	Id openapi_types.UUID `json:"id"`

	// Origin Место отбытия
	Origin string `json:"origin"`
}

// FlightForList defines model for FlightForList.
type FlightForList struct {
	// ArrivalDate Дата прибытия
	ArrivalDate string `json:"arrival_date"`

	// ArrivalTime Время прибытия
	ArrivalTime string `json:"arrival_time"`

	// Company Название авиакомпании
	Company string `json:"company"`

	// DepartureDate Дата отбытия
	DepartureDate string `json:"departure_date"`

	// DepartureTime Время отбытия
	DepartureTime string `json:"departure_time"`

	// Destination Место прибытия
	Destination string `json:"destination"`

	// Id ID
	Id openapi_types.UUID `json:"id"`

	// MaxCost Максимальная стоимость билета
	MaxCost int64 `json:"max_cost"`

	// MinCost Минимальная стоимость билета
	MinCost int64 `json:"min_cost"`

	// Origin Место отбытия
	Origin string `json:"origin"`
}

// RefundExchange defines model for RefundExchange.
type RefundExchange struct {
	// Available Возможность возврата средств/обмена
	Available bool `json:"available"`

	// Constrains Ограничения по возврату/обмену
	Constrains string `json:"constrains"`

	// Cost Стоимость возврата/обмена в процентах от стоимости билета
	Cost int64 `json:"cost"`
}

// SimpleResponse defines model for SimpleResponse.
type SimpleResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// UserProfile defines model for UserProfile.
type UserProfile struct {
	// AvatarUrl URL по которому можно получить аватар пользователя.
	AvatarUrl string `json:"avatarUrl"`

	// Id Идентификатор пользователя
	Id openapi_types.UUID `json:"id"`

	// Login Логин пользователя в системе.
	Login string `json:"login"`
}

// GetFlightsParams defines parameters for GetFlights.
type GetFlightsParams struct {
	// DepartureDate Дата вылета
	DepartureDate openapi_types.Date `form:"departure_date" json:"departure_date"`

	// TicketClass Тип билета
	TicketClass *string `form:"ticket_class,omitempty" json:"ticket_class,omitempty"`

	// WithLuggage Наличие багажа
	WithLuggage *bool `form:"with_luggage,omitempty" json:"with_luggage,omitempty"`

	// Destination Место назначения
	Destination string `form:"destination" json:"destination"`
	Origin      string `form:"origin" json:"origin"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Информация о рейсе
	// (GET /v1/flight/{flight_id})
	GetFlight(w http.ResponseWriter, r *http.Request, flightId openapi_types.UUID)
	// Список подходящих рейсов
	// (GET /v1/flights)
	GetFlights(w http.ResponseWriter, r *http.Request, params GetFlightsParams)
	// Информация о рейсе
	// (GET /v1/simple_flight/{flight_id})
	GetSimpleFlight(w http.ResponseWriter, r *http.Request, flightId openapi_types.UUID)
	// Информация об аутентифицированном пользователе.
	// (GET /v1/user)
	GetAuthUser(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Информация о рейсе
// (GET /v1/flight/{flight_id})
func (_ Unimplemented) GetFlight(w http.ResponseWriter, r *http.Request, flightId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Список подходящих рейсов
// (GET /v1/flights)
func (_ Unimplemented) GetFlights(w http.ResponseWriter, r *http.Request, params GetFlightsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Информация о рейсе
// (GET /v1/simple_flight/{flight_id})
func (_ Unimplemented) GetSimpleFlight(w http.ResponseWriter, r *http.Request, flightId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Информация об аутентифицированном пользователе.
// (GET /v1/user)
func (_ Unimplemented) GetAuthUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetFlight operation middleware
func (siw *ServerInterfaceWrapper) GetFlight(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "flight_id" -------------
	var flightId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "flight_id", chi.URLParam(r, "flight_id"), &flightId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flight_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFlight(w, r, flightId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetFlights operation middleware
func (siw *ServerInterfaceWrapper) GetFlights(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFlightsParams

	// ------------- Required query parameter "departure_date" -------------

	if paramValue := r.URL.Query().Get("departure_date"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "departure_date"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "departure_date", r.URL.Query(), &params.DepartureDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "departure_date", Err: err})
		return
	}

	// ------------- Optional query parameter "ticket_class" -------------

	err = runtime.BindQueryParameter("form", true, false, "ticket_class", r.URL.Query(), &params.TicketClass)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ticket_class", Err: err})
		return
	}

	// ------------- Optional query parameter "with_luggage" -------------

	err = runtime.BindQueryParameter("form", true, false, "with_luggage", r.URL.Query(), &params.WithLuggage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "with_luggage", Err: err})
		return
	}

	// ------------- Required query parameter "destination" -------------

	if paramValue := r.URL.Query().Get("destination"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "destination"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "destination", r.URL.Query(), &params.Destination)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "destination", Err: err})
		return
	}

	// ------------- Required query parameter "origin" -------------

	if paramValue := r.URL.Query().Get("origin"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "origin"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "origin", r.URL.Query(), &params.Origin)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "origin", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFlights(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSimpleFlight operation middleware
func (siw *ServerInterfaceWrapper) GetSimpleFlight(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "flight_id" -------------
	var flightId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "flight_id", chi.URLParam(r, "flight_id"), &flightId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flight_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSimpleFlight(w, r, flightId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAuthUser operation middleware
func (siw *ServerInterfaceWrapper) GetAuthUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAuthUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/flight/{flight_id}", wrapper.GetFlight)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/flights", wrapper.GetFlights)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/simple_flight/{flight_id}", wrapper.GetSimpleFlight)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/user", wrapper.GetAuthUser)
	})

	return r
}
